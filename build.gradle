import java.text.SimpleDateFormat

plugins {
  id 'idea'

  id 'java'
  id 'java-library'

  id 'jacoco'

  id 'signing'
  id 'maven-publish'
}

group 'de.griefed'
sourceCompatibility = targetCompatibility = '1.8'

repositories {
  mavenCentral()
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java']
    }
    resources {
      srcDirs = ['src/main/resources']
    }
  }
  test {
    java {
      srcDirs = ['src/test/java']
    }
    resources {
      srcDirs = ['src/test/resources']
    }
  }
}

configurations {

  embed
  implementation.extendsFrom(embed)
}

dependencies {
  implementation 'org.jetbrains:annotations:23.0.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}

test {
  useJUnitPlatform()

  testLogging {
    events "passed",
        "skipped",
        "failed"
  }

  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test // tests are required to run before generating the report

  reports {
    xml.required = true
  }
}

jacoco {
  toolVersion = "0.8.9"
  reportsDirectory = layout.buildDirectory.dir('jacoco')
}

javadoc {
  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
  classpath = sourceSets.main.runtimeClasspath
}

java {
  withSourcesJar()
  withJavadocJar()
}

jar {
  // No duplicates
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE

  // Include all libraries in our JAR-file.
  from {
    configurations.embed.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
  }

  // Customize MANIFEST to include relevant information.
  manifest {
    attributes(
        "Description": "A Larson Scanner inspired by Battlestar Galactica Cylons and Knight Rider Kitt.",
        "Built-By": System.getProperty("user.name"),
        "Build-Timestamp": new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
        "Created-By": "Gradle ${gradle.gradleVersion}",
        "Build-Jdk": "${System.getProperty('java.version')} (${System.getProperty('java.vendor')} ${System.getProperty('java.vm.version')})",
        "Build-OS": "${System.getProperty('os.name')} ${System.getProperty('os.arch')} ${System.getProperty('os.version')}"
    )
  }
}


publishing {
  publications {
    mavenJava(MavenPublication) {

      groupId = 'de.griefed'
      artifactId = 'larsonscanner'
      from components.java
      version = project.version

      pom {
        name = 'LarsonScanner'
        description = 'A Larson Scanner inspired by Battlestar Galactica Cylons and Knight Rider Kitt.'
        url = 'https://git.griefed.de/Griefed/LarsonScanner.git'

        licenses {
          license {
            name = 'MIT License'
            url = 'https://opensource.org/licenses/MIT'
          }
        }

        developers {
          developer {
            id = 'griefed'
            name = 'Griefed'
            email = 'griefed@griefed.de'
          }
        }

        scm {
          connection = 'scm:git:git:git.griefed.de/Griefed/LarsonScanner.git'
          developerConnection = 'scm:git:ssh://git.griefed.de/Griefed/LarsonScanner.git'
          url = 'https://git.griefed.de/Griefed/LarsonScanner.git'
        }

      }
    }
  }

  repositories {
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/Griefed/larsonscanner"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
    maven {
        url = "https://git.griefed.de/api/v4/projects/109/packages/maven"
        credentials(HttpHeaderCredentials) {
            name = "Private-Token"
            value = System.getenv("GITLAB_TOKEN")
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
    maven {
        url = "https://gitlab.com/api/v4/projects/36995385/packages/maven"
        credentials(HttpHeaderCredentials) {
            name = "Private-Token"
            value = System.getenv("GITLABCOM_TOKEN")
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
    maven {
      name = "OSSRH"
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = System.getenv("OSSRH_USERNAME")
        password = System.getenv("OSSRH_PASSWORD")
      }
    }
  }
}

signing {
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")

  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}